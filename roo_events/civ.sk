# -------------------- state variables (don't modify) -------------------- #
variables:
    # ----- unnecessary initialization ----- #
    # {red::team::*}
    # {green::team::*}
    # {blue::team::*}
    # {yellow::team::*}
    # {red::alive::*}
    # {green::alive::*}
    # {blue::alive::*}
    # {yellow::alive::*}
    # {is::dead::*}
    # {in::spec::*}
    # {civ::combat::*}
    # ----- global initialization ----- #
    # {combat::cooldown::%player%} = 0
    {respawn} = true

# -------------------- spawns -------------------- #
local function lobby_spawn() :: object:
    return location(0.5, 0, 0.5, world "rooevents", 90, 0)

local function team_choosing_spawn() :: object:
    return location(0.5, -62, 0.5, world "cc", 0, 0)

local function red_spawn() :: object:
    return location(12.5, -62, 5.5, world "cc", 180, 0)

local function green_spawn() :: object:
    return location(16.5, -62, 5.5, world "cc", 180, 0)

local function blue_spawn() :: object:
    return location(14.5, -62, 5.5, world "cc", 180, 0)

local function yellow_spawn() :: object:
    return location(10.5, -62, 5.5, world "cc", 180, 0)

# -------------------- command function -------------------- #
local function set_gamemode(p: player, m: text):
    execute console command "/minecraft:gamemode %{_m}% %{_p}%"

local function set_lp(p: player, n: text):
    execute console command "/luckperms user %{_p}% parent set %{_n}%"

# -------------------- helper function -------------------- #
local function remove_from_team(p: player):
    remove {_p} from {red::team::*}
    remove {_p} from {green::team::*}
    remove {_p} from {blue::team::*}
    remove {_p} from {yellow::team::*}

local function remove_from_alive(p: player):
    remove {_p} from {red::alive::*}
    remove {_p} from {green::alive::*}
    remove {_p} from {blue::alive::*}
    remove {_p} from {yellow::alive::*}

local function is_on_team(p: player) :: boolean:
    if {red::team::*} contains {_p}:
        return true
    else if {green::team::*} contains {_p}:
        return true
    else if {blue::team::*} contains {_p}:
        return true
    else if {yellow::team::*} contains {_p}:
        return true
    return false

local function clean_up():
    delete {red::team::*}
    delete {green::team::*}
    delete {blue::team::*}
    delete {yellow::team::*}
    delete {red::alive::*}
    delete {green::alive::*}
    delete {blue::alive::*}
    delete {yellow::alive::*}
    delete {is::dead::*}
    delete {in::spec::*}
    set {respawn} to true

# -------------------- scoreboard function -------------------- #
local function get_team(p: player) :: text:
    if {red::team::*} contains {_p}:
        return "&c&lReindeer"
    else if {green::team::*} contains {_p}:
        return "&a&lGrinches"
    else if {blue::team::*} contains {_p}:
        return "&b&lSnowmen"
    else if {yellow::team::*} contains {_p}:
        return "&e&lElves"
    return ""

# -------------------- scoreboard -------------------- #
on join:
    if {is::dead::*} contains player: # if not {respawn}:
        wait 1 tick
        set_gamemode(player, "spectator")
    else if {in::spec::*} contains player:
        if {red::team::*} contains player:
            add player to {red::alive::*}
            teleport player to red_spawn()
        else if {green::team::*} contains player:
            add player to {green::alive::*}
            teleport player to green_spawn()
        else if {blue::team::*} contains player:
            add player to {blue::alive::*}
            teleport player to blue_spawn()
        else if {yellow::team::*} contains player:
            add player to {yellow::alive::*}
            teleport player to yellow_spawn()
        remove player from {in::spec::*}
    else if {civ::combat::*} contain player:
        if {red::team::*} contains player:
            add player to {red::alive::*}
            teleport player to red_spawn()
        else if {green::team::*} contains player:
            add player to {green::alive::*}
            teleport player to green_spawn()
        else if {blue::team::*} contains player:
            add player to {blue::alive::*}
            teleport player to blue_spawn()
        else if {yellow::team::*} contains player:
            add player to {yellow::alive::*}
            teleport player to yellow_spawn() 
    else:
        if {red::team::*} contains player:
            add player to {red::alive::*}
        else if {green::team::*} contains player:
            add player to {green::alive::*}
        else if {blue::team::*} contains player:
            add player to {blue::alive::*}
        else if {yellow::team::*} contains player:
            add player to {yellow::alive::*}
    remove player from {civ::combat::*}
    while player is online:
        if player is in world "cc":
            set line 1 of player's scoreboard to "&6&m                               "
            set line 2 of player's scoreboard to "%colored {phase}%:&r %game_time()%"
            set line 3 of player's scoreboard to "&6&m                               "
            set line 4 of player's scoreboard to "&e&lElves Alive: %size of {yellow::alive::*}%"
            set line 5 of player's scoreboard to "&b&lSnowmen Alive: %size of {blue::alive::*}%"
            set line 6 of player's scoreboard to "&a&lGrinches Alive: %size of {green::alive::*}%"
            set line 7 of player's scoreboard to "&c&lReindeer Alive: %size of {red::alive::*}%"
            set line 8 of player's scoreboard to ""
            set line 9 of player's scoreboard to "&lTeam:&r %get_team(player)%"
            set line 10 of player's scoreboard to "&6&m                               "
            set title of player's scoreboard to "&x&f&f&2&6&2&6&lR&x&f&f&3&a&2&1&lo&x&f&f&4&e&1&6&lo &x&f&f&6&2&1&8&lE&x&f&f&7&7&1&3&lv&x&f&f&8&b&0&e&le&x&f&f&9&f&0&a&ln&x&f&f&b&3&0&5&lt&x&f&f&c&7&0&0&ls"
        wait 1 second

# -------------------- team choosing -------------------- #
on region enter:
    if gamemode of player is not spectator:
        set {_max::team::size} to max(size of {red::team::*}, size of {green::team::*}, size of {blue::team::*}, size of {yellow::team::*})
        if size of {red::team::*} >= {_max::team::size} - 1:
            if size of {green::team::*} >= {_max::team::size} - 1:
                if size of {blue::team::*} >= {_max::team::size} - 1:
                    if size of {yellow::team::*} >= {_max::team::size} - 1:
                        add 1 to {_max::team::size}
        if "%region%" is "red in world cc":
            if {red::team::*} contains player:
                teleport player to red_spawn()
            else if size of {red::team::*} < {_max::team::size}:
                remove_from_team(player)
                remove_from_alive(player)
                set_lp(player, "reindeer")
                add player to {red::team::*}
                add player to {red::alive::*}
                teleport player to red_spawn()
            else:
                teleport player to team_choosing_spawn()
        else if "%region%" is "green in world cc":
            if {green::team::*} contains player:
                teleport player to green_spawn()
            else if size of {green::team::*} < {_max::team::size}:
                remove_from_team(player)
                remove_from_alive(player)
                set_lp(player, "grinch")
                add player to {green::team::*}
                add player to {green::alive::*}
                teleport player to green_spawn()
            else:
                teleport player to team_choosing_spawn()
        else if "%region%" is "blue in world cc":
            if {blue::team::*} contains player:
                teleport player to blue_spawn()
            else if size of {blue::team::*} < {_max::team::size}:
                remove_from_team(player)
                remove_from_alive(player)
                set_lp(player, "snowman")
                add player to {blue::team::*}
                add player to {blue::alive::*}
                teleport player to blue_spawn()
            else:
                teleport player to team_choosing_spawn()
        else if "%region%" is "yellow in world cc":
            if {yellow::team::*} contains player:
                teleport player to yellow_spawn()
            else if size of {yellow::team::*} < {_max::team::size}:
                remove_from_team(player)
                remove_from_alive(player)
                set_lp(player, "elf")
                add player to {yellow::team::*}
                add player to {yellow::alive::*}
                teleport player to yellow_spawn()
            else:
                teleport player to team_choosing_spawn()

# -------------------- team killing -------------------- #
on damage of player with priority highest:
    if {red::team::*} contains attacker:
        if {red::team::*} contains victim:
            cancel event
    else if {green::team::*} contains attacker:
        if {green::team::*} contains victim:
            cancel event
    else if {blue::team::*} contains attacker:
        if {blue::team::*} contains victim:
            cancel event
    else if {yellow::team::*} contains attacker:
        if {yellow::team::*} contains victim:
            cancel event

# -------------------- on death logic -------------------- #
on death of player with priority highest:
    if victim is in world "cc":
        if is_on_team(victim):
            cancel event
            set_gamemode(victim, "spectator")
            if {respawn}:
                set {_n} to 5
                set {_c} to {_n}
                loop {_n} times:
                    send title "&a%{_c}%" to victim
                    subtract 1 from {_c}
                    wait 1 second
                send title "" to victim
                if {in::spec::*} does not contain victim:
                    if {red::team::*} contains victim:
                        teleport victim to red_spawn()
                    else if {green::team::*} contains victim:
                        teleport victim to green_spawn()
                    else if {blue::team::*} contains victim:
                        teleport victim to blue_spawn()
                    else if {yellow::team::*} contains victim:
                        teleport victim to yellow_spawn()
                    set_gamemode(victim, "survival")
            else:
                remove_from_alive(victim)
                add victim to {is::dead::*}
                strike lightning effect at the victim
                send title "&cDead" to victim

# -------------------- quit logic -------------------- #
on quit:
    remove_from_alive(player)
    if {combat::cooldown::%player%} > 0:
        add player to {civ::combat::*}
    if gamemode of player is spectator:
        add player to {in::spec::*}

# -------------------- no chat -------------------- #
on chat with priority highest:
    if player's gamemode is spectator:
        if player is not op:
            cancel event

# -------------------- commands -------------------- #
command /civresetall:
    permission: op
    trigger:
        clean_up()
        loop all players:
            set_lp(loop-player, "default")

command /civrespawn <boolean>:
    permission: op
    trigger:
        set {respawn} to arg-1

command /civsetteam <player> <text>:
    permission: op
    trigger:
        if arg-2 is "reindeer":
            remove_from_team(arg-1)
            remove_from_alive(arg-1)
            add arg-1 to {red::team::*}
            add arg-1 to {red::alive::*}
            set_lp(arg-1, arg-2)
        else if arg-2 is "grinches":
            remove_from_team(arg-1)
            remove_from_alive(arg-1)
            add arg-1 to {green::team::*}
            add arg-1 to {green::alive::*}
            set_lp(arg-1, arg-2)
        else if arg-2 is "snowman":
            remove_from_team(arg-1)
            remove_from_alive(arg-1)
            add arg-1 to {blue::team::*}
            add arg-1 to {blue::alive::*}
            set_lp(arg-1, arg-2)
        else if arg-2 is "elves":
            remove_from_team(arg-1)
            remove_from_alive(arg-1)
            add arg-1 to {yellow::team::*}
            add arg-1 to {yellow::alive::*}
            set_lp(arg-1, arg-2)

command /civtpteam <text>:
    permission: op
    trigger:
        if arg-1 is "reindeer":
            loop {red::team::*}:
                teleport loop-value to player
        else if arg-1 is "grinches":
            loop {green::team::*}:
                teleport loop-value to player
        else if arg-1 is "snowman":
            loop {blue::team::*}:
                teleport loop-value to player
        else if arg-1 is "elves":
            loop {yellow::team::*}:
                teleport loop-value to player

command /civreviveall:
    permission: op
    trigger:
        loop {is::dead::*}:
            if is_on_team(loop-value):
                remove_from_alive(loop-value)
                remove loop-value from {is::dead::*}
                if {red::team::*} contains loop-value:
                    add loop-value to {red::alive::*}
                    teleport loop-value to red_spawn()
                else if {green::team::*} contains loop-value:
                    add loop-value to {green::alive::*}
                    teleport loop-value to green_spawn()
                else if {blue::team::*} contains loop-value:
                    add loop-value to {blue::alive::*}
                    teleport loop-value to blue_spawn()
                else if {yellow::team::*} contains loop-value:
                    add loop-value to {yellow::alive::*}
                    teleport loop-value to yellow_spawn()
                set_gamemode(loop-value, "survival")

command /civreviveplayer <player>:
    permission: op
    trigger:
        if {is::dead::*} contains arg-1:
            if is_on_team(arg-1):
                remove_from_alive(arg-1)
                remove arg-1 from {is::dead::*}
                if {red::team::*} contains arg-1:
                    add arg-1 to {red::alive::*}
                else if {green::team::*} contains arg-1:
                    add arg-1 to {green::alive::*}
                else if {blue::team::*} contains arg-1:
                    add arg-1 to {blue::alive::*}
                else if {yellow::team::*} contains arg-1:
                    add arg-1 to {yellow::alive::*}
                set_gamemode(arg-1, "survival")

command /civend:
    permission: op
    trigger:
        clean_up()
        loop all players:
            set_lp(loop-player, "default")
            teleport loop-player to lobby_spawn()

command /civwallsdown:
    permission: op
    trigger:
        # center
        wait 5 ticks
        fill("cc", -159, 113, 161, -159, 27, -158, "air")
        wait 5 ticks
        fill("cc", -159, 27, -158, 159, 113, -158, "air")
        wait 5 ticks
        fill("cc", 159, 113, -158, 159, 27, 161, "air")
        wait 5 ticks
        fill("cc", 159, 27, 161, -159, 113, 161, "air")
        # outer
        wait 5 ticks
        fill("cc", 0, 27, 162, 0, 58, 1000, "air")
        wait 5 ticks
        fill("cc", -160, 27, 0, -1000, 58, 0, "air")
        wait 5 ticks
        fill("cc", 0, 27, -159, 0, 58, -1000, "air")
        wait 5 ticks
        fill("cc", 160, 27, 0, 1000, 58, 0, "air")
        wait 5 ticks
        fill("cc", 0, 59, 162, 0, 90, 1000, "air")
        wait 5 ticks
        fill("cc", -160, 59, 0, -1000, 90, 0, "air")
        wait 5 ticks
        fill("cc", 0, 59, -159, 0, 90, -1000, "air")
        wait 5 ticks
        fill("cc", 160, 59, 0, 1000, 90, 0, "air")
        wait 5 ticks
        fill("cc", 0, 91, 162, 0, 122, 1000, "air")
        wait 5 ticks
        fill("cc", -160, 91, 0, -1000, 122, 0, "air")
        wait 5 ticks
        fill("cc", 0, 91, -159, 0, 122, -1000, "air")
        wait 5 ticks
        fill("cc", 160, 91, 0, 1000, 122, 0, "air")
        wait 5 ticks
        fill("cc", 0, 123, 162, 0, 154, 1000, "air")
        wait 5 ticks
        fill("cc", -160, 123, 0, -1000, 154, 0, "air")
        wait 5 ticks
        fill("cc", 0, 123, -159, 0, 154, -1000, "air")
        wait 5 ticks
        fill("cc", 160, 123, 0, 1000, 154, 0, "air")
        wait 5 ticks
        fill("cc", 0, 155, 162, 0, 186, 1000, "air")
        wait 5 ticks
        fill("cc", -160, 155, 0, -1000, 186, 0, "air")
        wait 5 ticks
        fill("cc", 0, 155, -159, 0, 186, -1000, "air")
        wait 5 ticks
        fill("cc", 160, 155, 0, 1000, 186, 0, "air")
        wait 5 ticks
        fill("cc", 0, 187, 162, 0, 200, 1000, "air")
        wait 5 ticks
        fill("cc", -160, 187, 0, -1000, 200, 0, "air")
        wait 5 ticks
        fill("cc", 0, 187, -159, 0, 200, -1000, "air")
        wait 5 ticks
        fill("cc", 160, 187, 0, 1000, 200, 0, "air")
        # center
        wait 5 ticks
        fill("cc", -159, 200, 161, -159, 114, -158, "air")
        wait 5 ticks
        fill("cc", -159, 114, -158, 159, 200, -158, "air")
        wait 5 ticks
        fill("cc", 159, 200, -158, 159, 114, 161, "air")
        wait 5 ticks
        fill("cc", 159, 114, 161, -159, 200, 161, "air")

command /civwallsup:
    permission: op
    trigger:
        # center
        wait 5 ticks
        fill("cc", -159, 113, 161, -159, 27, -158, "barrier")
        wait 5 ticks
        fill("cc", -159, 27, -158, 159, 113, -158, "barrier")
        wait 5 ticks
        fill("cc", 159, 113, -158, 159, 27, 161, "barrier")
        wait 5 ticks
        fill("cc", 159, 27, 161, -159, 113, 161, "barrier")
        # outer
        wait 5 ticks
        fill("cc", 0, 27, 162, 0, 58, 1000, "barrier")
        wait 5 ticks
        fill("cc", -160, 27, 0, -1000, 58, 0, "barrier")
        wait 5 ticks
        fill("cc", 0, 27, -159, 0, 58, -1000, "barrier")
        wait 5 ticks
        fill("cc", 160, 27, 0, 1000, 58, 0, "barrier")
        wait 5 ticks
        fill("cc", 0, 59, 162, 0, 90, 1000, "barrier")
        wait 5 ticks
        fill("cc", -160, 59, 0, -1000, 90, 0, "barrier")
        wait 5 ticks
        fill("cc", 0, 59, -159, 0, 90, -1000, "barrier")
        wait 5 ticks
        fill("cc", 160, 59, 0, 1000, 90, 0, "barrier")
        wait 5 ticks
        fill("cc", 0, 91, 162, 0, 122, 1000, "barrier")
        wait 5 ticks
        fill("cc", -160, 91, 0, -1000, 122, 0, "barrier")
        wait 5 ticks
        fill("cc", 0, 91, -159, 0, 122, -1000, "barrier")
        wait 5 ticks
        fill("cc", 160, 91, 0, 1000, 122, 0, "barrier")
        wait 5 ticks
        fill("cc", 0, 123, 162, 0, 154, 1000, "barrier")
        wait 5 ticks
        fill("cc", -160, 123, 0, -1000, 154, 0, "barrier")
        wait 5 ticks
        fill("cc", 0, 123, -159, 0, 154, -1000, "barrier")
        wait 5 ticks
        fill("cc", 160, 123, 0, 1000, 154, 0, "barrier")
        wait 5 ticks
        fill("cc", 0, 155, 162, 0, 186, 1000, "barrier")
        wait 5 ticks
        fill("cc", -160, 155, 0, -1000, 186, 0, "barrier")
        wait 5 ticks
        fill("cc", 0, 155, -159, 0, 186, -1000, "barrier")
        wait 5 ticks
        fill("cc", 160, 155, 0, 1000, 186, 0, "barrier")
        wait 5 ticks
        fill("cc", 0, 187, 162, 0, 200, 1000, "barrier")
        wait 5 ticks
        fill("cc", -160, 187, 0, -1000, 200, 0, "barrier")
        wait 5 ticks
        fill("cc", 0, 187, -159, 0, 200, -1000, "barrier")
        wait 5 ticks
        fill("cc", 160, 187, 0, 1000, 200, 0, "barrier")
        # center
        wait 5 ticks
        fill("cc", -159, 200, 161, -159, 114, -158, "barrier")
        wait 5 ticks
        fill("cc", -159, 114, -158, 159, 200, -158, "barrier")
        wait 5 ticks
        fill("cc", 159, 200, -158, 159, 114, 161, "barrier")
        wait 5 ticks
        fill("cc", 159, 114, 161, -159, 200, 161, "barrier")
